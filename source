local StarterGui = game:GetService("StarterGui")

-- Send a notification
StarterGui:SetCore("SendNotification", {
    Title = "cool hub executed!";
    Text = "Please wait for the GUI to load";
    Icon = nil;  
    Duration = 5;  
})
local plr = game.Players.LocalPlayer
local chr = plr.Character
local displayName = chr.Humanoid.DisplayName
local name = plr.Name









-- Hub
if displayName == nil then
    displayName = "Display_Not_Found"
end

local color = {
    SchemeColor = Color3.fromRGB(0,100,0),
    Background = Color3.fromRGB(50, 125, 50),
    Header = Color3.fromRGB(0, 5, 0),
    TextColor = Color3.fromRGB(255, 255, 255),
    ElementColor = Color3.fromRGB(25, 150, 25)
}
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Hello, [ "..displayName.." | @"..name.." ] | 1.3.3", color)

local Tab = Window:NewTab("Built-in")
local Section = Tab:NewSection("cool stuff here")
Section:NewLabel("RNG   (make sure you press enter)")

local rngmin = 1
local rngmax = 10

Section:NewTextBox("Minimum", "Set the RNG minimum", function(txt)
    rngmin = tonumber(txt) or rngmin  
    if rngmin < 0 then rngmin = 0 end  -- Ensure rngmin is at least 0
end)

Section:NewTextBox("Maximum", "Set the RNG maximum", function(txt)
    rngmax = tonumber(txt) or rngmax  
    if rngmax > 1000000 then rngmax = 1000000 end  -- Ensure rngmax does not exceed 1,000,000
end)

Section:NewButton("RNG", "Activates the RNG", function()
    if rngmin > rngmax then
        StarterGui:SetCore("SendNotification", {
            Title = "Error"; 
            Text = "Minimum cannot be greater than Maximum!"; 
            Duration = 5;  
            Button1 = "OK";
        })
        return
    end

    local randomNumber = math.random(rngmin, rngmax)

    StarterGui:SetCore("SendNotification", {
        Title = tostring(randomNumber); 
        Text = "Your number is:"; 
        Icon = img;  
        Duration = 10;  
        Button1 = "OK";
        Callback = function()
            print("RNG activated")
        end
    })
end)

local Section = Tab:NewSection("             Character")
Section:NewSlider("WalkSpeed", "you already know it", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)
Section:NewButton("Reset WalkSpeed", "you already know it", function()
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
end)
Section:NewButton("Kill yourself", "you will die", function()
    game.Players.LocalPlayer.Character.Humanoid.Health = 0
end)

local player = game.Players.LocalPlayer
local StarterGui = game:GetService("StarterGui")

local isRotating = false  
local isPlatformStand = false  -- New toggle variable
local tweakpower = 30  -- Default rotation power
local tweakspeed = 0.2  -- Default speed
local rootPart  
local humanoid  

-- Function to update character reference after respawn
local function onCharacterAdded(character)
    rootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:FindFirstChildOfClass("Humanoid")  -- Get Humanoid
end

-- Connect to CharacterAdded to handle resets
player.CharacterAdded:Connect(onCharacterAdded)

-- Initialize on first script run
if player.Character then
    onCharacterAdded(player.Character)
end

Section:NewTextBox("Shake Strength", "Set how much the player tilts", function(txt)
    tweakpower = tonumber(txt) or tweakpower  
end)

Section:NewTextBox("Shake Speed", "Set how fast it happens (lower is faster!!)", function(txt)
    tweakspeed = tonumber(txt) or tweakspeed  
end)

Section:NewToggle("Paralyzed", "Make player Paralyzed while tweaking", function(state)
    isPlatformStand = state  

    if humanoid then
        humanoid.PlatformStand = isPlatformStand and isRotating  -- Apply only if tweaking is active
    end
end)

Section:NewToggle("Shaking", "Are you okay?", function(state)
    isRotating = state  

    if humanoid and isPlatformStand then
        humanoid.PlatformStand = isRotating  -- Set PlatformStand if enabled
    end

    if isRotating then
        task.spawn(function()
            while isRotating do
                task.wait(tweakspeed)  -- Customizable speed

                if rootPart then  -- Prevent errors if player dies
                    local offsetX = math.random(-tweakpower, tweakpower)  
                    local offsetY = math.random(-tweakpower, tweakpower)  
                    local offsetZ = math.random(-tweakpower, tweakpower)  

                    rootPart.CFrame = rootPart.CFrame * CFrame.Angles(math.rad(offsetX), math.rad(offsetY), math.rad(offsetZ))
                end
            end
        end)
    elseif humanoid and isPlatformStand then
        humanoid.PlatformStand = false  -- Reset PlatformStand when tweaking stops
    end
end)

local flingpower = 50  -- Default fling power

Section:NewTextBox("Fling Power", "Set how strong the fling is", function(txt)
    flingpower = tonumber(txt) or flingpower
end)

Section:NewButton("Fling Yourself", "Launch yourself forward!", function()
    local character = player.Character
    if character then
        local root = character:FindFirstChild("HumanoidRootPart")
        local humanoid = character:FindFirstChild("Humanoid")

        if root and humanoid then
            humanoid.PlatformStand = true
            local forwardDirection = root.CFrame.LookVector * flingpower
            root.Velocity = forwardDirection + Vector3.new(0, flingpower / 2, 0)  -- Adds upward force too
            task.wait(0.5)
            humanoid.PlatformStand = false
            
        end
    end
end)

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")
local rootPart = character:FindFirstChild("HumanoidRootPart")

local isLagging = false  
local lagIntensity = 5  
local savedPosition = rootPart and rootPart.CFrame or nil  

-- Function to update character references on respawn
local function updateCharacter(newCharacter)
    character = newCharacter
    humanoid = character:FindFirstChildOfClass("Humanoid")
    rootPart = character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        savedPosition = rootPart.CFrame  -- Store position upon respawn
    end
end

player.CharacterAdded:Connect(updateCharacter)

-- Lag Intensity Textbox
Section:NewTextBox("Lag Intensity", "Set how choppy the lag is", function(txt)
    local num = tonumber(txt)
    if num then
        lagIntensity = math.max(1, num)  
    end
end)

-- Fake Lag Toggle
Section:NewToggle("Fake Lag", "Simulates extreme choppy lag", function(state)
    isLagging = state  

    if isLagging then
        task.spawn(function()
            while isLagging do
                if humanoid and rootPart then
                    local freezeChance = math.min(lagIntensity * 0.1, 0.65)  
                    local freezeTime = math.random(0.05, 0.3) * lagIntensity  
                    local unfreezeTime = math.random(0.03, 0.15) * (11 - lagIntensity)

                    -- **Save Position & Wait Before Teleporting**
                    savedPosition = rootPart.CFrame  
                    task.wait(math.random(0, 0.3))  -- Wait between 0â€“0.3 sec
                    rootPart.CFrame = savedPosition  

                    -- **Simulate Lag Spikes**
                    if math.random() < freezeChance then
                        rootPart.Anchored = true  
                        task.wait(freezeTime)  
                        rootPart.Anchored = false  
                    else
                        humanoid.WalkSpeed = math.random(8, 18)  
                    end

                    task.wait(unfreezeTime)
                end
            end
        end)
    else
        -- Restore normal movement when toggled off
        if humanoid and rootPart then
            humanoid.WalkSpeed = 16  
            rootPart.Anchored = false  
            if savedPosition then
                rootPart.CFrame = savedPosition  -- Restore position for smooth movement
            end
        end
    end
end)


local Section = Tab:NewSection("Misc")

Section:NewTextBox("Lua Executor", "can execute your scripts", function(txt)
    local success, err = pcall(function()
        loadstring(txt)()
    end)

    if not success then
        StarterGui:SetCore("SendNotification", {
            Title = "Execution Error"; 
            Text = err;  -- Avoid long error messages
            Icon = nil;  
            Duration = 5;  
            Button1 = "OK";
        })
        StarterGui:SetCore("SendNotification", {
            Title = "Execution Error"; 
            Text = "Check console for more info";  -- Avoid long error messages
            Icon = nil;  
            Duration = 5;  
            Button1 = "OK";
        })

        
        warn("[cool hub script] Execution Error: " .. err)  -- Print full error in console
    end
end)  -- << Closing parenthesis was missing here!

local img = "4632517063"

Section:NewTextBox("custom images", "rarely works :/", function(txt)
    img = "rbxassetid://" .. txt
    StarterGui:SetCore("SendNotification", {
    Title = "ID Sent"; 
    Text = img; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

local StarterGui = game:GetService("StarterGui")
local player = game.Players.LocalPlayer

Section:NewButton("Time Played (on server)", "Check how long you've been playing", function()
    local elapsedTime = game.workspace.DistributedGameTime

    local hours = math.floor(elapsedTime / 3600)  -- 3600 seconds in an hour
    local minutes = math.floor((elapsedTime % 3600) / 60)  -- 60 seconds in a minute
    local seconds = math.floor(elapsedTime % 60)  -- Get remaining seconds

    local timedata = string.format("%d hours, %d minutes, %d seconds", hours, minutes, seconds)

    StarterGui:SetCore("SendNotification", {
    Title = "Time played"; 
    Text = hours.." Hours | "..minutes.." Minutes | "..seconds.." Seconds"; 
    Icon = nil;  
    Duration = 5;  
    })

end)

local Section = Tab:NewSection("Visual")

Section:NewLabel("Tracers")
local TracerEnabled = false
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local Tracers = {}
local Labels = {}

local function CreateTracer(target, isPlayer)
    if IgnorePlayers and isPlayer then 
        RemoveTracer(target, true) -- Remove any existing tracers for players
        return 
    end
    
    local line = Drawing.new("Line")
    line.Thickness = 2
    line.Transparency = 1
    line.Visible = false
    
    if isPlayer then
        Tracers[target] = line
        local label = Drawing.new("Text")
        label.Size = 16
        label.Center = true
        label.Outline = true
        label.OutlineColor = Color3.fromRGB(0, 0, 0)
        label.Visible = false
        Labels[target] = label
    else
        HumanoidTracers[target] = line
        local label = Drawing.new("Text")
        label.Size = 16
        label.Center = true
        label.Outline = true
        label.OutlineColor = Color3.fromRGB(0, 0, 0)
        label.Visible = false
        HumanoidLabels[target] = label
    end
end


local function RemoveTracer(target)
    if Tracers[target] then
        Tracers[target]:Remove()
        Tracers[target] = nil
    end
    if Labels[target] then
        Labels[target]:Remove()
        Labels[target] = nil
    end
end

local function ResetTracers()
    for target in pairs(Tracers) do
        RemoveTracer(target)
    end
end

local function UpdateTracers()
    if not TracerEnabled then return end
    
    for target, line in pairs(Tracers) do
        if target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = target.Character.HumanoidRootPart
            local distance = (Camera.CFrame.Position - rootPart.Position).Magnitude
            local rootPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
            local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
            
            if onScreen then
                local greenValue = math.clamp(255 - (distance * 2), 0, 255)
                local tracerColor = Color3.fromRGB(255 - greenValue, greenValue, 0)
                
                line.Color = tracerColor
                line.From = screenCenter
                line.To = Vector2.new(rootPos.X, rootPos.Y)
                line.Visible = true
                
                local label = Labels[target]
                if label then
                    local scale = math.clamp(16 - (distance / 10), 8, 16)
                    label.Size = scale
                    label.Position = Vector2.new(rootPos.X, rootPos.Y - 20)
                    label.Text = string.format("%s\n%.1f studs", target.Name, distance)
                    label.Color = tracerColor
                    label.OutlineColor = Color3.fromRGB(0, 0, 0)
                    label.Visible = true
                end
            else
                line.Visible = false
                if Labels[target] then
                    Labels[target].Visible = false
                end
            end
        else
            RemoveTracer(target)
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    if TracerEnabled then
        CreateTracer(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    RemoveTracer(player)
end)

Section:NewToggle("Player Tracer", "Toggles tracers for players only", function(state)
    if state then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                CreateTracer(player, true)
            end
        end
        RunService:BindToRenderStep("UpdatePlayerTracers", Enum.RenderPriority.Camera.Value, function()
    for target, line in pairs(Tracers) do
        if target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = target.Character.HumanoidRootPart
            local distance = (Camera.CFrame.Position - rootPart.Position).Magnitude
            local rootPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
            local head = target.Character:FindFirstChild("Head")
            local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

            if onScreen then
                -- Color transitions from Green (close) to Red (far)
                local greenValue = math.clamp(255 - (distance * 2), 0, 255)
                local tracerColor = Color3.fromRGB(255 - greenValue, greenValue, 0)


                line.Color = tracerColor
                line.From = screenCenter
                line.To = Vector2.new(rootPos.X, rootPos.Y)
                line.Visible = true

                -- Label for player
                if head then
                    local headPos, headOnScreen = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 1.5, 0))
                    local label = Labels[target]
                    if headOnScreen and label then
                        local scale = math.clamp(20 - (distance / 15), 10, 20) -- Adjust text size
                        label.Size = scale
                        label.Position = Vector2.new(headPos.X, headPos.Y)
                        label.Text = string.format("%s\n%.1f studs", target.Name, distance)
                        label.Color = tracerColor
                        label.OutlineColor = Color3.fromRGB(0, 0, 0)
                        label.Visible = true
                    else
                        label.Visible = false
                    end
                end
            else
                line.Visible = false
                if Labels[target] then
                    Labels[target].Visible = false
                end
            end
        else
            RemoveTracer(target, true)
        end
    end
end)

    else
        RunService:UnbindFromRenderStep("UpdatePlayerTracers")
        for target in pairs(Tracers) do
            RemoveTracer(target, true)
        end
    end
end)











Section:NewLabel("Humanoid Tracer")

local TracerEnabled = false
local IgnorePlayers = false
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Workspace = game:GetService("Workspace")

local Tracers = {}
local Labels = {}
local HumanoidTracers = {}
local HumanoidLabels = {}
local DetectionRadius = 100

local function CreateTracer(target)
    -- Check if the humanoid belongs to a player
    if game.Players:GetPlayerFromCharacter(target.Parent) then return end  

    local line = Drawing.new("Line")
    line.Thickness = 2
    line.Transparency = 1
    line.Visible = false

    HumanoidTracers[target] = line
    local label = Drawing.new("Text")
    label.Size = 16
    label.Center = true
    label.Outline = true
    label.OutlineColor = Color3.fromRGB(0, 0, 0)
    label.Visible = false
    HumanoidLabels[target] = label
end



local function RemoveTracer(target, isPlayer)
    if isPlayer then
        if Tracers[target] then
            Tracers[target]:Remove()
            Tracers[target] = nil
        end
        if Labels[target] then
            Labels[target]:Remove()
            Labels[target] = nil
        end
    else
        if HumanoidTracers[target] then
            HumanoidTracers[target]:Remove()
            HumanoidTracers[target] = nil
        end
        if HumanoidLabels[target] then
            HumanoidLabels[target]:Remove()
            HumanoidLabels[target] = nil
        end
    end
end

local function ResetTracers()
    for target in pairs(Tracers) do
        RemoveTracer(target, true)
    end
    for target in pairs(HumanoidTracers) do
        RemoveTracer(target, false)
    end
end

local function UpdateTracers()
    if not TracerEnabled then return end
    
    for target, line in pairs(HumanoidTracers) do
        if target.Parent and target.Parent:FindFirstChild("HumanoidRootPart") then
            local rootPart = target.Parent.HumanoidRootPart
            local distance = (Camera.CFrame.Position - rootPart.Position).Magnitude
            if distance <= DetectionRadius then
                local rootPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
                local head = target.Parent:FindFirstChild("Head")
                local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                
                if onScreen then
                    local greenValue = math.clamp(255 - (distance * 2), 0, 255)
                    local tracerColor = Color3.fromRGB(255 - greenValue, greenValue, 0)
                    
                    line.Color = tracerColor
                    line.From = screenCenter
                    line.To = Vector2.new(rootPos.X, rootPos.Y)
                    line.Visible = true
                    
                    if head then
                        local headPos, headOnScreen = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 1.5, 0))
                        local label = HumanoidLabels[target]
                        if headOnScreen and label then
                         local scale = math.clamp(20 - (distance / 15), 10, 20) -- Adjust size dynamically
                          label.Size = scale
                          label.Position = Vector2.new(headPos.X, headPos.Y)
                          label.Text = string.format("%s\n%.1f studs", target.Parent.Name, distance)
                          label.Color = tracerColor
                          label.OutlineColor = Color3.fromRGB(0, 0, 0)
                          label.Visible = true
                        else
                         label.Visible = false
end

                    end
                else
                    line.Visible = false
                    if HumanoidLabels[target] then
                        HumanoidLabels[target].Visible = false
                    end
                end
            else
                line.Visible = false
                if HumanoidLabels[target] then
                    HumanoidLabels[target].Visible = false
                end
            end
        else
            RemoveTracer(target, false)
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    if TracerEnabled then
        CreateTracer(player, true)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    RemoveTracer(player, true)
end)

Section:NewToggle("Humanoid Tracer", "Toggles tracers for NPCs only", function(state)
    TracerEnabled = state
    if state then
        -- Create tracers for only NPC humanoids
        for _, humanoid in pairs(workspace:GetDescendants()) do
            if humanoid:IsA("Humanoid") and not game.Players:GetPlayerFromCharacter(humanoid.Parent) then
                CreateTracer(humanoid)
            end
        end
        RunService:BindToRenderStep("UpdateTracers", Enum.RenderPriority.Camera.Value, UpdateTracers)
    else
        RunService:UnbindFromRenderStep("UpdateTracers")
        ResetTracers()
    end
end)



Section:NewTextBox("Detection Radius", "Set the detection radius for humanoid tracing", function(txt)
    local radius = tonumber(txt)
    if radius then
        DetectionRadius = math.clamp(radius, 10, 1000)
    end
end)

-- Fix: Detect humanoids inside models dynamically
workspace.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("Humanoid") and descendant.Parent ~= LocalPlayer.Character then
        local character = descendant.Parent
        task.spawn(function()
            local rootPart = character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart", 5)
            if rootPart then
                CreateTracer(descendant, false)
            end
        end)
    end
end)



local Tab = Window:NewTab("universal")
local Section = Tab:NewSection("universal")

Section:NewButton("Infinite Yield", "this is the best universal script out there", function() loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "Infinite Yield was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("blackhole", "e to spawn/move q to delete", function() loadstring(game:HttpGet("https://pastebin.com/raw/tstrtDFD"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "blackhole was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)






Section:NewButton("more unc", "mostly for solara", function() loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-MoreUNC-13110"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "more unc was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("automatic chat bypass", "holy crap this thing fucking work", function() loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Synergy-Networks/products/main/BetterBypasser/loader.lua"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "chatbypass was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)


Section:NewButton("c00lware", "am very cool", function() loadstring(game:HttpGet("https://raw.githubusercontent.com/thatonestupidkid1/COOLKID-WARE/main/obfuscation"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "c00l ware was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("project cmdbar", ";radio", function() loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-projectCMDBAR-16747"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "project cmdbar was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("free gamepass (not work on all game)", "nil", function() loadstring(game:HttpGet(('https://raw.githubusercontent.com/BaconBossScript/Crazy/main/Crazy'),true))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "free gamepass was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

local Tab = Window:NewTab("other")
local Section = Tab:NewSection("other")

Section:NewButton("chatbot hub", "talk like a robot (you need to join the discord)", function() loadstring(game:HttpGet("https://raw.githubusercontent.com/Guerric9018/chatbothub/main/ChatbotHub.lua"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "chatbot was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("solspy", "remotespy but solara supported", function() loadstring(game:HttpGet("https://gist.githubusercontent.com/Uylost/960b592d7fc7161c3e6de0047547d874/raw/cc0e9ca436afe2c3e253fdb357d1a61efd576098/gistfile1.txt"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "solspy was Injected/Executed"; 
    Icon =  img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("micro backdoor", "backdoor scanner", function() loadstring(game:HttpGet("https://paste.ee/r/GipgWZb8"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "microbackdoor was Injected/Executed"; 
    Icon =  img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("lalol backdoor", "lalol lalol", function() loadstring(game:HttpGet('https://raw.githubusercontent.com/Its-LALOL/LALOL-Hub/main/Backdoor-Scanner/script'))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "lalol backdoor was Injected/Executed"; 
    Icon =  img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("fe r6 animation", "nil", function() loadstring(game:HttpGet('https://raw.githubusercontent.com/redxs-dosx/R6-Anim-Hub/refs/heads/main/Hub%20Script%20(.lua)'))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "fe r6 animation was Injected/Executed"; 
    Icon =  img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

local Tab = Window:NewTab("Main")
local Section = Tab:NewSection("                With Key")

Section:NewButton("build a boat (check info!!!)", "key is N-314159 may be outdated", function() loadstring(game:HttpGet("https://rawscripts.net/raw/Build-A-Boat-For-Treasure-NovBot-Revmp-17896"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "novbot was Injected/Executed"; 
    Icon =  img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("Native", "native is cool", function() (loadstring or load)(game:HttpGet("https://raw.githubusercontent.com/Native-lab/Native/main/loader.lua"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "native was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

local Section = Tab:NewSection("                Without Key")

Section:NewButton("work at a pizza place", "job simulator", function() loadstring(game:HttpGet('https://pastebin.com/raw/Q5KUCy6t'))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "lds hub(work at a pizza place) was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("booga booga [reborn]", "ooaa", function() loadstring(game:HttpGet('https://raw.githubusercontent.com/Yousuck780/Nebula-Hub/refs/heads/main/boogaboogareborn'))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "nebulav2 was Injected/Executed"; 
    Icon =  img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("SpeedHub X", "speedhub x is cool", function() loadstring(game:HttpGet("https://raw.githubusercontent.com/AhmadV99/Speed-Hub-X/main/Speed%20Hub%20X.lua", true))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "speedhubx was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("3008", "three thousand eight", function() loadstring(game:HttpGet'https://raw.githubusercontent.com/Yumiara/Python/refs/heads/main/SCP3008.py')()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "3008 was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("lumber tycoon 2", "chop sell buy", function() loadstring(game:HttpGet('https://raw.githubusercontent.com/frencaliber/LuaWareLoader.lw/main/luawareloader.wtf',true))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "lumber tycoon 2 was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)

Section:NewButton("King Legacy", "nil", function() loadstring(game:HttpGet("https://rawscripts.net/raw/(UPDATE-7)-King-Legacy-Storyshift-scriptd-not-owned-by-me-21546"))()
    StarterGui:SetCore("SendNotification", {
    Title = "Executed!"; 
    Text = "arc hub(king legacy) was Injected/Executed"; 
    Icon = img;  
    Duration = 5;  
    Button1 = "OK";
    })
end)
